// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        
        And(a=instruction[15], b=instruction[3], out=writeM); //YAY
        And(a=instruction[15], b=instruction[4], out=writeD);
        Not(in=instruction[15], out=writeA1);
        And(a=instruction[15], b=instruction[5], out=writeA2);
        Or(a=writeA1, b=writeA2, out=writeA);

        Mux16(a=instruction, b=ALUResult, sel=instruction[15], out=AorC);
        ARegister(in=AorC, load=writeA, out=storedA, out[0..14]=addressM); //YAY
        Mux(a=true, b=instruction[12], sel=instruction[15], out=AorM);
        Mux16(a=storedA, b=inM, sel=AorM, out=A);
        
        //Do a jump?
        And(a=zr, b=instruction[1], out=doJumpIfZero);
        And(a=ng, b=instruction[2], out=doJumpIfNG);
        Not(in=zr, out=notZR);
        Not(in=ng, out=notNG);
        And(a=notZR, b=notNG, out=notZRandNG);
        And(a=notZRandNG, b=instruction[0], out=doJumpIfPos);
        Or(a=doJumpIfZero, b=doJumpIfNG, out=doJump1);
        Or(a=doJump1, b=doJumpIfPos, out=doJump2);
        And(a=doJump2, b=instruction[15], out=doJump);
        Not(in=doJump, out=notDoJump);

        PC(in=storedA, inc=notDoJump, load=doJump, reset=reset, out[0..14]=pc); //YAY

        DRegister(in=DRegLookup, load=writeD, out=D);
        ALU(x=D, y=A, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
            f=instruction[7], no=instruction[6], zr=zr, ng=ng,
            out=ALUResult, out=DRegLookup, out=outM); //YAY
}